FUNCTION "plx_analytics::FN_HIERARCHY_AUFNR_IO" (
		ControllingArea NVARCHAR(12),
		Order_Group_Root_Node NVARCHAR(24),
		CHART_OF_ACCOUNTS NVARCHAR(12)
		--CE_Group_Root_Node NVARCHAR(24)
	) 
 	RETURNS table(
		 CONTROLLING_AREA NVARCHAR(4)
		, LEVEL	INTEGER
		,  PARENT nvarchar(24)
		, CHILD NVARCHAR(24)
		, LEN NVARCHAR(24)
		--INTERNAL_ORDER NVARCHAR(24)
		--, COST_ELEMENT NVARCHAR(24)
	)

	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS
BEGIN

/* Compute the Cost Element Standard Hierarchy */

DECLARE NUM int := 0; 
DECLARE CE_NUM int := 0;
DECLARE LV_CE_COUNT int:= 0;
DECLARE LV_MAX int := 0;
DECLARE LV_MIN int := 0;
DECLARE LEV int := 1;
DECLARE STCLS nvarchar(4) := '0103';
DECLARE CE_STCLS nvarchar(4) := '0102';
DECLARE CE_LEV int := 1;

BEGIN

	/*In case Order_Group_Root_Node is empty, retrieve only leaf(Cost Center) node from SETLEAF table*/

	if :Order_Group_Root_Node = '' then

	LT_IO_TMP = 
	SELECT NULL AS PARENT, 
		   NULL AS CHILD, 
		   VALOPTION AS VALOPTION, 
		   VALFROM as VALFROM, 
		   VALTO as VALTO, 
		   1 AS LEVEL, 
		   :ControllingArea AS ControllingArea,
		   NULL AS LEN
	FROM "ECC_SETLEAF"
	WHERE SETCLASS = :STCLS; 
	--AND	  trim(SUBCLASS)  = :ControllingArea;

	var_out = 
	SELECT PARENT, 
		   --CHILD, 
		   --VALFROM AS COST_ELEMENT, 
		   VALFROM as CHILD,
		   LEVEL, 
		   ControllingArea,
		   LEN
	FROM :LT_IO_TMP;

	LT_IO_TMP2 = 
	SELECT NULL AS PARENT, 
		   CE.CHILD AS CHILD, 
	--	   CSKT.KOSTL AS CHILD, 
		   CE.LEVEL AS LEVEL, 
		   :ControllingArea AS ControllingArea,
		   LEN
	FROM :LT_IO_TMP as CE; 
	--inner join PLX_DW.ECC_CSKT as CSKT 
	--ON (CSKT.KOSTL >= CE.VALFROM 
	--and CSKT.KOSTL <= CE.VALTO)
	--WHERE trim(cskt.KOKRS)  = :ControllingArea;

	var_out = 
	SELECT  PARENT, 
			CHILD, 
			--COST_ELEMENT, 
			LEVEL, 
			ControllingArea,
			LEN
	  from :var_out
	UNION
	SELECT  PARENT, 
			CHILD, 
			--COST_ELEMENT, 
			LEVEL, 
			ControllingArea,
			LEN 
	  from :LT_IO_TMP2;

	/*If Order_Group_Root_Node is empty, empty cost element should also be considered*/

	LT_IO_TMP_2 = 
		SELECT DISTINCT NULL AS PARENT, 
				    	--NULL AS CHILD, 
				    	--'' AS COST_ELEMENT, 
				    	'' as child,
				    	1 AS LEVEL, 
				    	:ControllingArea AS ControllingArea,
				    	NULL AS LEN
		FROM "ECC_SETLEAF"
		WHERE SETCLASS = :STCLS;
		--and   trim(SUBCLASS)  = :ControllingArea;

	var_out = 
		SELECT PARENT, 
			   CHILD, 
			   --COST_ELEMENT, 
			   LEVEL, 
			   ControllingArea,
			   NULL AS LEN 
		 from :var_out
	UNION
		SELECT  PARENT, 
		    	CHILD, 
		    	--COST_ELEMENT, 
		    	LEVEL, 
		    	ControllingArea,
		    	LEN
		   from :LT_IO_TMP_2;

	/*Retrieve all hierarchy groups and the cost center from both SETNODE and SETLEAF, incase Order_Group_Root_Node is not empty*/

	else

	LT_ROOT = 
		SELECT DISTINCT NULL AS PARENT, 
						SETNAME AS CHILD, 
						--NULL AS COST_ELEMENT, 
						1 AS LEVEL, 
						:ControllingArea AS ControllingArea
		FROM "ECC_SETNODE"
		WHERE SETCLASS = :STCLS
		--and   trim(SUBCLASS)  = :ControllingArea 
		and   trim(SETNAME)  = :Order_Group_Root_Node;

	/*inacase for a group node, there is no subgroup, then it will not be in SETNODE, but only in SETLEAF*/

	LT_ROOT2 = 
		SELECT DISTINCT NULL AS PARENT, 
						SETNAME AS CHILD, 
						--NULL AS COST_ELEMENT, 
						1 AS LEVEL, 
						:ControllingArea AS ControllingArea
		FROM "ECC_SETLEAF"
		WHERE SETCLASS = :STCLS 
		--and   trim(SUBCLASS)  = :ControllingArea 
		and   trim(SETNAME)  = :Order_Group_Root_Node;

	LT_HIERARCHY = 
		SELECT PARENT, 
			   CHILD, 
			  -- COST_ELEMENT, 
			   LEVEL, 
			   ControllingArea,
			   NULL AS LEN
			    from :LT_ROOT

		UNION
		
		SELECT  PARENT, 
				CHILD, 
				--COST_ELEMENT, 
				LEVEL, 
				ControllingArea,
				NULL AS LEN
				 from :LT_ROOT2;

	while 1 = 1 do

		LT_HIERARCHY_TMP = 
		    SELECT 
			    part.SETNAME AS PARENT, 
			    part.SUBSETNAME AS CHILD, 
			   -- NULL AS COST_ELEMENT, 
			    :LEV + 1 AS LEVEL, 
			    :ControllingArea AS ControllingArea,
			    LEN
		    FROM :LT_HIERARCHY as main 
			    inner join "ECC_SETNODE" as part 
			    ON (main.CHILD = part.SETNAME)
		    WHERE part.SETCLASS = :STCLS
			    --and   trim(part.SUBCLASS)  = :ControllingArea 
			    and   main.LEVEL = :LEV;

	    SELECT COUNT(*) INTO NUM FROM :LT_HIERARCHY_TMP;
	
	    if :NUM = 0 then
	        break;
	    end if;

	    LT_HIERARCHY =
		    SELECT PARENT,
			    CHILD,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    LEN
		    from :LT_HIERARCHY
	        
	        UNION
		    
		    SELECT PARENT,
			    CHILD,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    LEN
		    from :LT_HIERARCHY_TMP;
	
	    LEV := :LEV + 1;

	end while;

	LT_IO_TMP =
	  	SELECT
		  	CE.SETNAME AS PARENT,
		  	NULL AS CHILD,
		  	CE.VALOPTION AS VALOPTION,
		  	CE.VALFROM as VALFROM,
		  	CE.VALTO as VALTO,
		  	CC_gr.LEVEL + 1 AS LEVEL,
		  	:ControllingArea AS ControllingArea,
		  	LEN
		FROM :LT_HIERARCHY as CC_gr
	  	inner join "ECC_SETLEAF" as CE
	  	ON (CC_gr.CHILD 	= CE.SETNAME)
		WHERE CE.SETCLASS 		= :STCLS;
	  	--and trim(CE.SUBCLASS) 		= :ControllingArea;


	LT_IO =
		  SELECT PARENT,
		        -- CHILD,
		        -- VALFROM AS COST_ELEMENT,
		        valfrom as child,
		         LEVEL,
		         ControllingArea,
		         LEN
			FROM :LT_IO_TMP;
		  
	LT_IO_TMP2 =
	  SELECT
		  CE.PARENT AS PARENT,
		  --CE.CHILD AS CHILD,
		 -- CSKT.KOSTL AS COST_ELEMENT,
		 --CSKT.KOSTL as child,
		  trim(AUFNR) as CHILD,
		  CE.LEVEL AS LEVEL,
		  :ControllingArea AS ControllingArea,
		  LEN
	  FROM
		  :LT_IO_TMP as CE
		  INNER JOIN "ECC_AUFK" as AUFK
		  ON (trim(AUFK.AUFNR) >= CE.VALFROM
	      and trim(AUFK.AUFNR) <= CE.VALTO)
	      WHERE trim(AUFK.KOKRS)  = :ControllingArea; --AC ADD
	  --WHERE trim(CSKT.KOKRS)  = :ControllingArea;

	
	LT_IO =
		SELECT
			PARENT,
			CHILD,
		--	COST_ELEMENT,
			LEVEL,
			ControllingArea,
			LEN
		from :LT_IO
	
		UNION
	
		SELECT
			  PARENT,
			  CHILD,
		--	  COST_ELEMENT,
			  LEVEL,
			  ControllingArea,
			  LEN
		from :LT_IO_TMP2
		;

	
		var_out =
		  SELECT
			  PARENT,
			  CHILD,
		--	  COST_ELEMENT,
			  LEVEL,
			  ControllingArea,
			  LEN
		  from :LT_HIERARCHY
	
	    UNION
	
			SELECT
			  PARENT,
			  CHILD,
		--	  COST_ELEMENT,
			  LEVEL,
			  ControllingArea,
			  LEN
		  from :LT_IO;

	end if;

END;

RETURN


--SELECT * FROM :VAR_OUT;
select 
 	trim(ControllingArea) as CONTROLLING_AREA
, 	LEVEL	
,	PARENT
,	trim(child) as CHILD
, LEN
--,   trim(INTERNAL_ORDER) as INTERNAL_ORDER
from :var_out;

end;