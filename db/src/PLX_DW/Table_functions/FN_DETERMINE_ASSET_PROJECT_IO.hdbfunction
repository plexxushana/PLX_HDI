FUNCTION "plx_analytics::FN_DETERMINE_ASSET_PROJECT_IO" ( ) 
	RETURNS table ( 
			BUKRS NVARCHAR(4)
		, ANLN1 NVARCHAR(12)
		, ANLN2 NVARCHAR(12)
		--, PSPHI NVARCHAR(50)
		, OBJNR NVARCHAR(50)
		--, POSID_WBS NVARCHAR(50)
		--, POST1_WBS NVARCHAR(50)
		, IO_NUMBER NVARCHAR(50)
		--, SETTL_DOC	NVARCHAR(10)
		--, PO_NR		NVARCHAR(10)
		--, PO_LINE	NVARCHAR(5)
		--, FI_DOC	NVARCHAR(10)
		--, FI_DOC_LINE	NVARCHAR(3)
		--, PSPID_PARENT NVARCHAR(50)
		--, POST1_PARENT NVARCHAR(50)
		)
		
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS
BEGIN  
/***************************** 
	Write your function logic
 *****************************/
 declare lv_BUKRS NVARCHAR(4):='1700';
 	DECLARE lv_start_date VARCHAR(8) := '20180301';
	DECLARE lv_end_date VARCHAR(8) := '20180301';
	DECLARE lv_cpudt_start, lv_cpudt_end, lv_aedat_start, lv_aedat_end VARCHAR(8) := '29990101';
	DECLARE ARR_ANLN1 NVARCHAR(12) ARRAY;
	DECLARE ARR_BKPF_BUKRS  NVARCHAR(4) ARRAY;
	DECLARE ARR_BKPF_GJAHR  VARCHAR(4) ARRAY;
	
	DECLARE lv_row_count, lv_step INTEGER;
	DECLARE i, lv_mod, lv_rest,  lv_div , lv_first_time, lv_counter  INTEGER;
	-- select company codes
   -- why?  we use company codes as a partition criteria 
   -- in the fetch statments
   T_OUT = SELECT  '' AS BUKRS, '' AS ANLN1, '' AS ANLN2, '' AS PSPHI,  '' AS OBJNR, '' AS POSID_WBS, '' AS POST1_WBS, '' AS IO_NUMBER, 
		'' AS SETTL_DOC, ''  AS PO_NR, '' AS PO_LINE, ''  AS FI_DOC, ''  AS FI_DOC_LINE , '' AS PSPID_PARENT, '' AS POST1_PARENT FROM "SYS::DUMMY";
		
	ccodes_list = 
		select distinct bukrs 
		from "CCODE_MEMBER";
	 -- store dataset size in row_count variable
	SELECT COUNT(bukrs)
	INTO lv_row_count
	FROM :ccodes_list;
	
	-- get list of ASSETS FROM ANLA table  within this 
	
	FOR i IN 0 .. :lv_row_count-1 DO
	
	   -- walk through the company codes
	   -- one at a time.  This is supplied in the where below.
		SELECT "BUKRS"
		INTO lv_bukrs
		FROM :ccodes_list
		LIMIT 1 OFFSET :i; -- notice OFFSET indexes at 0, not 1
		
		
	lt_assets_list = 
	SELECT  BUKRS, ANLN1, ANLN2
	FROM    "ECC_ANLA"
	WHERE   "BUKRS" = :lv_bukrs ; 
   
	ARR_ANLN1  := ARRAY_AGG(:lt_assets_list.ANLN1 ORDER BY BUKRS, ANLN1);
	
	
--THERE are 3 sources of data a. settlement(type AUAK, AIBU 2. PO 3.FI tables 	
--From settlements documents determine the Project or IO
	LT_CC_TMP_SETTLE1 = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2,  B.OBART, B.OBJID , B.BELNR
	FROM "ECC_ANLA" AS A INNER JOIN "ECC_ANEK" AS B 
	ON A.BUKRS = B.BUKRS AND A.ANLN1 = B.ANLN1  AND A.ANLN2 = B.ANLN2  
	WHERE A.BUKRS= :LV_BUKRS AND TRIM(B.AWTYP) = 'AUAK' ; 
	
	LT_CC_TMP_SETTLE = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2, CONCAT( A.OBART, A.OBJID)  AS OBJNR , D1.POSID, D1.POST1,  D1.PSPHI, A.BELNR  from :LT_CC_TMP_SETTLE1 as A 
	left outer join "ECC_PRPS" AS D1 ON TRIM(A.OBJID) = D1.PSPNR ;
	
--THOSE Aassets that settle from 90000 series 	
	LT_CC_TMP_ANEK1 = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2, A.ANLU1 ,A.ANLU2, MIN(A.BELNR) AS BELNR  
	FROM "ECC_ANEK" AS A 
	where TRIM(A.tcode) = 'AIBU'  AND TRIM(A.ANLU1) !='' AND A.BUKRS = :LV_BUKRS  
	--AND SUBSTR(A.ANLN1, 6,1) !='5' 
	GROUP BY ANLN1, ANLU1, BUKRS , ANLN2, ANLU2 ;
	
-- EXCLUDE THE LINE WHERE 2100282 is linked to 9000141	
	
	LT_CC_TMP_ANEK2 = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2, A.ANLU1 ,A.ANLU2, A.BELNR AS BELNR  , 
	( CASE WHEN A.BELNR = '0000000068' and A.ANLN1 = '000002100282' AND A.BUKRS = '1700'  THEN 'X' ELSE '' END  ) AS "FILTER"
	FROM :LT_CC_TMP_ANEK1 AS A ;
	
	LT_CC_TMP_ANEK3 = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2, A.ANLU1 ,A.ANLU2, A.BELNR AS BELNR  FROM :LT_CC_TMP_ANEK2   AS A 
	where "FILTER" != 'X';
		
	LT_CC_TMP_ANEK = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2, B.OBJNR, B.POSID, B.POST1,  B.PSPHI , A.BELNR 
	FROM :LT_CC_TMP_ANEK3 AS A INNER JOIN :LT_CC_TMP_SETTLE AS B 
	ON A.BUKRS=B.BUKRS AND A.ANLU1 = B.ANLN1 AND  A.ANLU2 = B.ANLN2;
	
	
	
	
	
--From PO Line Items , determine the Project or IO	
	
	LT_CC_TMP_PO1 = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2,  C.PS_PSP_PNR, C.AUFNR  , C.EBELN, C.EBELP 
	FROM "ECC_ANLA" AS A INNER JOIN "ECC_ANEK" AS B 
	ON A.BUKRS = B.BUKRS AND A.ANLN1 = B.ANLN1  AND A.ANLN2 = B.ANLN2
	INNER JOIN "ECC_EKKN" AS C 
	  ON  B.EBELN = C.EBELN AND B.EBELP=C.EBELP AND B.ANLN1 = C.ANLN1 
	WHERE A.BUKRS= :LV_BUKRS  ; 
	
	
	LT_CC_TMP_PO = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2,  D1.OBJNR, D1.PSPHI,D1.POSID, D1.POST1, A.AUFNR , A.EBELN, A.EBELP  from :LT_CC_TMP_PO1 as A 
	left outer join "ECC_PRPS" AS D1 ON A.PS_PSP_PNR = D1.PSPNR ;
	
	
--From FI documents determine the Project or IO	
	LT_CC_TMP_FI1 = 
	SELECT A.BUKRS, A.ANLN1, A.ANLN2,  C.PROJK, C.AUFNR , C.BELNR , C.BUZEI 
	FROM "ECC_ANLA" AS A INNER JOIN "ECC_ANEK" AS B 
	ON A.BUKRS = B.BUKRS AND A.ANLN1 = B.ANLN1  AND A.ANLN2 = B.ANLN2
	INNER JOIN "ECC_BSEG" AS C 
	  ON  B.BUKRS = C.BUKRS AND B.BELNR =C.BELNR  AND B.GJAHR = C.GJAHR AND B.ANLN1 = C.ANLN1 
	WHERE A.BUKRS= :LV_BUKRS  ; 
	
	
	LT_CC_TMP_FI = 
		SELECT A.BUKRS, A.ANLN1, A.ANLN2, D1.OBJNR,  D1.PSPHI,D1.POSID, D1.POST1, A.AUFNR, A.BELNR , A.BUZEI  from :LT_CC_TMP_FI1 as A 
		left outer join "ECC_PRPS" AS D1 ON A.PROJK = D1.PSPNR ;
	
	
	 
	LT_ALL_DATA = 
		SELECT BUKRS, ANLN1, ANLN2,PSPHI , OBJNR, POSID AS POSID_WBS, POST1 AS POST1_WBS, '' AS IO_NUMBER, 
		BELNR AS SETTL_DOC, '' AS PO_NR, '' AS PO_LINE, '' AS FI_DOC, '' AS FI_DOC_LINE
		FROM :LT_CC_TMP_SETTLE
	UNION
	    SELECT BUKRS, ANLN1, ANLN2,PSPHI , OBJNR, POSID AS POSID_WBS, POST1 AS POST1_WBS, '' AS IO_NUMBER, 
		BELNR AS SETTL_DOC, '' AS PO_NR, '' AS PO_LINE, '' AS FI_DOC, '' AS FI_DOC_LINE
		FROM :LT_CC_TMP_ANEK	
		
	UNION 
		SELECT BUKRS, ANLN1, ANLN2,  PSPHI,  OBJNR, POSID AS POSID_WBS, POST1 AS POST1_WBS,AUFNR AS IO_NUMBER, 
		'' AS SETTL_DOC, EBELN  AS PO_NR, EBELP AS PO_LINE, '' AS FI_DOC, '' AS FI_DOC_LINE
		FROM :LT_CC_TMP_PO
	UNION 
		SELECT BUKRS, ANLN1, ANLN2, PSPHI,  OBJNR, POSID AS POSID_WBS, POST1 AS POST1_WBS, AUFNR AS IO_NUMBER, 
		'' AS SETTL_DOC, ''  AS PO_NR, '' AS PO_LINE, BELNR  AS FI_DOC, BUZEI AS FI_DOC_LINE 
		FROM :LT_CC_TMP_FI;
		
		
		
	--	SELECT  A.BUKRS, A.ANLN1, A.ANLN2,A.PSPHI , A.OBJNR,  A.POSID_WBS,  A.POST1_WBS, A.IO_NUMBER, 
	--	A.SETTL_DOC,  A.PO_NR,  A.PO_LINE, A.FI_DOC, A.FI_DOC_LINE, B.PSPID AS PSPID_PARENT , B.POST1 AS POST1_PARENT 
	--	 FROM :LT_ALL_DATA  AS A LEFT OUTER JOIN PLX_DW.ECC_PROJ AS B 
	--	ON A.PSPHI = B.PSPNR ;
		
		
		
		T_OUT =  
		   SELECT BUKRS, ANLN1, ANLN2,  PSPHI,  OBJNR, POSID_WBS, POST1_WBS,IO_NUMBER, 
		SETTL_DOC, PO_NR, PO_LINE, FI_DOC, FI_DOC_LINE , '' AS PSPID_PARENT, '' AS POST1_PARENT from :LT_ALL_DATA
		
		union all
		 SELECT BUKRS, ANLN1, ANLN2,  PSPHI,  OBJNR, POSID_WBS, POST1_WBS,IO_NUMBER, 
		SETTL_DOC, PO_NR, PO_LINE, FI_DOC, FI_DOC_LINE , '' AS PSPID_APRENT, '' AS POST1_PARENT from :T_OUT;
		
		
		END FOR;
		
		RETURN
		SELECT BUKRS 
		, ANLN1  
		, ANLN2  
		--, MAX(PSPHI) AS PSPHI
		, max(OBJNR) as OBJNR  
		--, POSID_WBS  
		--, POST1_WBS  
		, MAX(IO_NUMBER) AS IO_NUMBER 
		--, SETTL_DOC	 
		--, PO_NR		 
		--, PO_LINE	 
		--, FI_DOC	 
		--, FI_DOC_LINE	 
		--, '' AS PSPID_PARENT  
		--, '' AS POST1_PARENT   
		FROM :T_OUT GROUP BY BUKRS, ANLN1, ANLN2 ; 
		
		
		
		
END;