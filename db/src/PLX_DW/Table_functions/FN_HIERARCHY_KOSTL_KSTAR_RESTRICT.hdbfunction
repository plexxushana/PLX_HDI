FUNCTION "plx_analytics::FN_HIERARCHY_KOSTL_KSTAR_RESTRICT" (
		ControllingArea NVARCHAR(12),
		CC_Group_Root_Node NVARCHAR(24),
		CHART_OF_ACCOUNTS NVARCHAR(12),
		CE_Group_Root_Node NVARCHAR(24)
	)
 	RETURNS table(
		 CONTROLLING_AREA NVARCHAR(4)
		, CHART_OF_ACCOUNTS NVARCHAR(12)
		, LEVEL	INTEGER
		,  PARENT nvarchar(24)
		, CHILD NVARCHAR(24)
		, CHILD_CONCAT NVARCHAR(24)
		--, COST_ELEMENT NVARCHAR(24)
	)

	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS
BEGIN

/* Compute the Cost Element Standard Hierarchy */

DECLARE NUM int := 0;
DECLARE CE_NUM int := 0;
DECLARE LV_CE_COUNT int:= 0;
DECLARE lv_max int := 0;
DECLARE lv_min int := 0;
DECLARE LEV int := 1;
DECLARE CE_LEV int := 1;
DECLARE STCLS nvarchar(4) := '0101';
DECLARE CE_STCLS nvarchar(4) := '0102';
DECLARE CCAUTHCOUNT int := 0;
DECLARE COUNTALL int := 0;

BEGIN

	/*In case Group_Root_Node is empty, retrieve only leaf(Cost Center) node from SETLEAF table*/

	if :CC_Group_Root_Node = '' then

	LT_CC_TMP =
	SELECT NULL AS PARENT,
		   NULL AS CHILD,
		   NULL AS CHILD_CONCAT,
		   VALOPTION AS VALOPTION,
		   VALFROM as VALFROM,
		   VALTO as VALTO,
		   1 AS LEVEL,
		   :ControllingArea AS ControllingArea,
		   :CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
	FROM "ECC_SETLEAF"
	WHERE SETCLASS = :STCLS
	AND	  trim(SUBCLASS)  = :ControllingArea;

	var_out =
	SELECT PARENT,
		   --CHILD,
		   --VALFROM AS COST_ELEMENT,
		   VALFROM as CHILD,
		   VALFROM as CHILD_CONCAT,
		   LEVEL,
		   ControllingArea,
		   CHART_OF_ACCOUNTS
	FROM :LT_CC_TMP;

	LT_CC_TMP2 =
	SELECT NULL AS PARENT,
		   -- CE.CHILD AS CHILD,
		   CSKT.KOSTL AS CHILD,
		   CSKT.KOSTL AS CHILD_CONCAT,
		   CE.LEVEL AS LEVEL,
		   :ControllingArea AS ControllingArea,
		   :CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
	FROM :LT_CC_TMP as CE
	inner join "ECC_CSKT" as CSKT
	ON (CSKT.KOSTL >= CE.VALFROM
	and CSKT.KOSTL <= CE.VALTO)
	WHERE trim(cskt.KOKRS)  = :ControllingArea;

	var_out =
	SELECT  PARENT,
			CHILD,
			CHILD_CONCAT,
			--COST_ELEMENT,
			LEVEL,
			ControllingArea,
			CHART_OF_ACCOUNTS
	  from :var_out
	UNION
	SELECT  PARENT,
			CHILD,
			CHILD_CONCAT,
			--COST_ELEMENT,
			LEVEL,
			ControllingArea,
			CHART_OF_ACCOUNTS
	  from :LT_CC_TMP2;

	/*If Group_Root_Node is empty, empty cost element should also be considered*/

	LT_CC_TMP_2 =
		SELECT DISTINCT NULL AS PARENT,
				    	--NULL AS CHILD,
				    	--'' AS COST_ELEMENT,
				    	'' as child,
				    	'' as CHILD_CONCAT,
				    	1 AS LEVEL,
				    	:ControllingArea AS ControllingArea,
				    	:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
		FROM "ECC_SETLEAF"
		WHERE SETCLASS = :STCLS
		and   trim(SUBCLASS)  = :ControllingArea;

	var_out =
		SELECT PARENT,
			   CHILD,
			   CHILD_CONCAT,
			   --COST_ELEMENT,
			   LEVEL,
			   ControllingArea,
			   CHART_OF_ACCOUNTS
		 from :var_out
	UNION
		SELECT  PARENT,
		    	CHILD,
		    	CHILD_CONCAT,
		    	--COST_ELEMENT,
		    	LEVEL,
		    	ControllingArea,
		    	CHART_OF_ACCOUNTS
		   from :LT_CC_TMP_2;

	/*Retrieve all hierarchy groups and the cost center from both SETNODE and SETLEAF, incase Group_Root_Node is not empty*/

	else
	-- Get CC Group Permissions

	LT_CGAUTH =
						SELECT DISTINCT
							 "NODE" AS CG_NODE,
							 "DESCRIPT" AS CG_DESCRIPT,
							 "KOKRS"
						FROM "plx_analytics::CA_DIM_CC_VALUE_HELP";

	-- Get all cc auths based on username
	LT_USER =
	SELECT
 			CURRENT_USER AS CURR_USER,
 	 		SESSION_USER AS SESS_USER FROM "SYS::DUMMY";

	LT_CCAUTH =
			SELECT trim(agr.uname) as uname,
				   trim(SUBSTR (low, 7)) as cc,
				   SUBSTR (low, 3,4) as kokrs
			FROM "ECC_AGR_USERS" as agr
			INNER JOIN :LT_USER as user
			ON (trim(agr.uname) = user.CURR_USER) --COMMENT HERE
			INNER JOIN "ECC_AGR_1251" as agr_1251
			ON (agr.agr_name = agr_1251.agr_name)
			WHERE trim(agr_1251.OBJECT) = 'K_CCA' AND trim(agr_1251.FIELD) = 'RESPAREA'
			AND trim(substring (agr_1251.LOW,1,2)) = 'KS';
			--AND trim(uname) = 'JSTOPCIATI';
			--AND trim(uname) = 'OCHEN';
			--AND trim(uname) = 'J_ASTA';
			--AND trim(uname) = 'ACHACKO';
		
	-- check if no auths exist for the user
	CCAUTHCOUNT = 0;
	SELECT COUNT(*) INTO CCAUTHCOUNT FROM :LT_CCAUTH;
	
	-- check for wild card in cc auth or hi auth and obtain controlling area
 	LT_ALLNODES = 
 		SELECT kokrs
 		FROM :LT_CCAUTH
 		WHERE :LT_CCAUTH.cc = '*'
 		AND kokrs = :ControllingArea;
 		
 	COUNTALL = 0;
 	
 	SELECT COUNT (*) INTO COUNTALL FROM :LT_ALLNODES;
	 
	-- CC GROUP
	LT_ROOT =
		SELECT DISTINCT NULL AS PARENT,
						trim(SETNAME) AS CHILD,
						trim(SETNAME) AS CHILD_CONCAT,
						--NULL AS COST_ELEMENT,
						1 AS LEVEL,
						:ControllingArea AS ControllingArea,
						:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
		FROM "ECC_SETNODE"
		WHERE SETCLASS = :STCLS
		and   trim(SUBCLASS)  = :ControllingArea
		and   trim(SETNAME)  = :CC_Group_Root_Node;

	/*inacase for a group node, there is no subgroup, then it will not be in SETNODE, but only in SETLEAF*/
	-- CC GROUP
	LT_ROOT2 =
		SELECT DISTINCT NULL AS PARENT,
						trim(SETNAME) AS CHILD,
						trim(SETNAME) AS CHILD_CONCAT,
						--NULL AS COST_ELEMENT,
						1 AS LEVEL,
						:ControllingArea AS ControllingArea,
						:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
		FROM "ECC_SETLEAF"
		WHERE SETCLASS = :STCLS
		and   trim(SUBCLASS)  = :ControllingArea
		and   trim(SETNAME)  = :CC_Group_Root_Node;

	LT_HIERARCHY =
		SELECT PARENT,
			   CHILD,
			   CHILD_CONCAT,
			  -- COST_ELEMENT,
			   LEVEL,
			   ControllingArea,
			   CHART_OF_ACCOUNTS from :LT_ROOT

		UNION

		SELECT  PARENT,
				CHILD,
				CHILD_CONCAT,
				--COST_ELEMENT,
				LEVEL,
				ControllingArea,
				CHART_OF_ACCOUNTS from :LT_ROOT2;

	while 1 = 1 do
	    -- CC GROUP (parent and child)
		LT_HIERARCHY_TMP =
		    SELECT
			    part.SETNAME AS PARENT,
			    trim(part.SUBSETNAME) AS CHILD,
			    trim(part.SUBSETNAME) AS CHILD_CONCAT,
			   -- NULL AS COST_ELEMENT,
			    :LEV + 1 AS LEVEL,
			    :ControllingArea AS ControllingArea,
			   	:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
		    FROM :LT_HIERARCHY as main
			    inner join "ECC_SETNODE" as part
			    ON (main.CHILD = part.SETNAME)

		    WHERE part.SETCLASS = :STCLS
			    and   trim(part.SUBCLASS)  = :ControllingArea
			    and   main.LEVEL = :LEV;

	    SELECT COUNT(*) INTO NUM FROM :LT_HIERARCHY_TMP;

	    if :NUM = 0 then
	        break;
	    end if;

	    LT_HIERARCHY =
		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    CHART_OF_ACCOUNTS
		    from :LT_HIERARCHY

	        UNION

		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    CHART_OF_ACCOUNTS
		    from :LT_HIERARCHY_TMP;

	    LEV := :LEV + 1;

	end while;

	--Join on CG Permissions
	LT_HIERARCHY = --LT_HIERARCHY_TEST = --edit for auth
					SELECT PARENT,
							    CHILD,
							    CHILD_CONCAT,
						--	    COST_ELEMENT,
							    LEVEL,
							    ControllingArea,
							    CHART_OF_ACCOUNTS
						    from :LT_HIERARCHY as HI
						    inner join :LT_CGAUTH AS ALLOW
						    ON HI.CHILD = ALLOW.cg_node
						    AND HI.ControllingArea = ALLOW.kokrs;
	LT_CC_TMP =
	  	SELECT
		  	CE.SETNAME AS PARENT,
		  	NULL AS CHILD,
		  	NULL AS CHILD_CONCAT,
		  	CE.VALOPTION AS VALOPTION,
		  	CE.VALFROM as VALFROM,
		  	CE.VALTO as VALTO,
		  	CC_gr.LEVEL + 1 AS LEVEL,
		  	:ControllingArea AS ControllingArea,
		  	:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
		FROM :LT_HIERARCHY as CC_gr
	  	inner join "ECC_SETLEAF" as CE
	  	ON (CC_gr.CHILD 	= CE.SETNAME)
		WHERE CE.SETCLASS 		= :STCLS
	  	and trim(CE.SUBCLASS) 		= :ControllingArea;

-- CHILD = COST CENTER
	LT_CC =
		  SELECT PARENT,
		        -- CHILD,
		        -- VALFROM AS COST_ELEMENT,
		        valfrom as child,
		        valfrom as CHILD_CONCAT,
		         LEVEL,
		         ControllingArea,
		         CHART_OF_ACCOUNTS
			FROM :LT_CC_TMP;

-- check to see if cc is in CSKT, possible to pull CC text here
/* edit for auth
	LT_CC_TMP2 =
	  SELECT
		  CE.PARENT AS PARENT,
		 -- CE.CHILD AS CHILD,
		 -- CSKT.KOSTL AS COST_ELEMENT,
		 CSKT.KOSTL as child,
		 CSKT.KOSTL as CHILD_CONCAT,
		  CE.LEVEL AS LEVEL,
		  :ControllingArea AS ControllingArea,
		  :CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
	  FROM
		  :LT_CC_TMP as CE
		  inner join PLX_DW.ECC_CSKT as CSKT
		  ON (CSKT.KOSTL >= CE.VALFROM
	      and CSKT.KOSTL <= CE.VALTO)
	  WHERE trim(CSKT.KOKRS)  = :ControllingArea;
	  */

	 if :CCAUTHCOUNT != 0 AND :COUNTALL = 0 then
	
	 LT_CC_TMP2 = --_TEST =
	  SELECT
		  CE.PARENT AS PARENT,
		 -- CE.CHILD AS CHILD,
		 -- CSKT.KOSTL AS COST_ELEMENT,
		 CSKT.KOSTL as child,
		 CSKT.KOSTL as CHILD_CONCAT,
		  CE.LEVEL AS LEVEL,
		  :ControllingArea AS ControllingArea,
		  :CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
	  FROM
		  :LT_CC_TMP as CE
		  inner join "ECC_CSKT" as CSKT
		  ON (trim(CSKT.KOSTL) >= trim(CE.VALFROM)
	      and trim(CSKT.KOSTL) <= trim(CE.VALTO))
	      inner join :LT_CCAUTH as CCAUTH
	      ON trim(CCAUTH.CC) = trim(CSKT.KOSTL)
	  WHERE trim(CSKT.KOKRS)  = :ControllingArea;

	  else
	  	LT_CC_TMP2 =
	  SELECT
		  CE.PARENT AS PARENT,
		 -- CE.CHILD AS CHILD,
		 -- CSKT.KOSTL AS COST_ELEMENT,
		 CSKT.KOSTL as child,
		 CSKT.KOSTL as CHILD_CONCAT,
		  CE.LEVEL AS LEVEL,
		  :ControllingArea AS ControllingArea,
		  :CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
	  FROM
		  :LT_CC_TMP as CE
		  inner join "ECC_CSKT" as CSKT
		  ON (CSKT.KOSTL >= CE.VALFROM
	      and CSKT.KOSTL <= CE.VALTO)
	  WHERE trim(CSKT.KOKRS)  = :ControllingArea;
	 end if; -- last edit
	/*AC - Bring in Cost Element Group*/
	LT_CE_ROOT =
		SELECT DISTINCT NULL AS PARENT,
						trim(SETNAME) AS CHILD,
						trim(SETNAME) AS CHILD_CONCAT,
						--NULL AS COST_ELEMENT,
						1 AS LEVEL,
						:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS,
						:ControllingArea AS ControllingArea
		FROM "ECC_SETNODE"
		WHERE SETCLASS = :CE_STCLS
		and   trim(SUBCLASS)  = :CHART_OF_ACCOUNTS
		and   trim(SETNAME)  = :CE_Group_Root_Node;

	/*inacase for a group node, there is no subgroup, then it will not be in SETNODE, but only in SETLEAF*/
	--child is cost element group
	LT_CE_ROOT2 =
		SELECT DISTINCT NULL AS PARENT,
						trim(SETNAME) AS CHILD,
						trim(SETNAME) AS CHILD_CONCAT,
						--NULL AS COST_ELEMENT,
						1 AS LEVEL,
						:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS,
						:ControllingArea AS ControllingArea
		FROM "ECC_SETLEAF"
		WHERE SETCLASS = :CE_STCLS
		and   trim(SUBCLASS)  = :CHART_OF_ACCOUNTS
		and   trim(SETNAME)  = :CE_Group_Root_Node;

		LT_CE_HIERARCHY =
		SELECT PARENT,
			   CHILD,
			   CHILD_CONCAT,
			  -- COST_ELEMENT,
			   LEVEL,
			   CHART_OF_ACCOUNTS,
			   ControllingArea from :LT_CE_ROOT

		UNION

		SELECT  PARENT,
				CHILD,
				CHILD_CONCAT,
				--COST_ELEMENT,
				LEVEL,
				CHART_OF_ACCOUNTS,
				ControllingArea from :LT_CE_ROOT2;


		while 1 = 1 do
		-- cost element group
		LT_CE_HIERARCHY_TMP =
		    SELECT
			    part.SETNAME AS PARENT,
			    trim(part.SUBSETNAME) AS CHILD,
			    trim(part.SUBSETNAME) AS CHILD_CONCAT,
			   -- NULL AS COST_ELEMENT,
			    :CE_LEV + 1 AS LEVEL,
			    :CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS,
			    :ControllingArea AS ControllingArea
		    FROM :LT_CE_HIERARCHY as main
			    inner join "ECC_SETNODE" as part
			    ON (main.CHILD = part.SETNAME)

		    WHERE part.SETCLASS = :CE_STCLS
			    and   trim(part.SUBCLASS)  = :CHART_OF_ACCOUNTS
			    and   main.LEVEL = :CE_LEV;

	    SELECT COUNT(*) INTO CE_NUM FROM :LT_CE_HIERARCHY_TMP;

	    if :CE_NUM = 0 then
	        break;
	    end if;

	    LT_CE_HIERARCHY =
		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    CHART_OF_ACCOUNTS,
			    ControllingArea
		    from :LT_CE_HIERARCHY

	        UNION

		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    CHART_OF_ACCOUNTS,
			    ControllingArea
		    from :LT_CE_HIERARCHY_TMP;

	    CE_LEV := :CE_LEV + 1;

	end while;

	LT_CE_TMP =
	  	SELECT
		  	CE.SETNAME AS PARENT,
		  	NULL AS CHILD,
		  	NULL AS CHILD_CONCAT,
		  	CE.VALOPTION AS VALOPTION,
		  	CE.VALFROM as VALFROM,
		  	CE.VALTO as VALTO,
		  	CE_gr.LEVEL + 1 AS LEVEL,
		  	:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS,
		  	:ControllingArea AS ControllingArea
		FROM :LT_CE_HIERARCHY as CE_gr
	  	inner join "ECC_SETLEAF" as CE
	  	ON (CE_gr.CHILD 	= CE.SETNAME)
		WHERE CE.SETCLASS 		= :CE_STCLS
	  	and trim(CE.SUBCLASS) 		= :CHART_OF_ACCOUNTS;

  	LT_CE =
		  SELECT PARENT,
		        -- CHILD,
		        -- VALFROM AS COST_ELEMENT,
		         valfrom as child,
		         valfrom as CHILD_CONCAT,
		         LEVEL,
		         CHART_OF_ACCOUNTS,
		         ControllingArea
			FROM :LT_CE_TMP;
-- PARENT IS COST ELEMENT GROUP, CHILD IS COST ELEMENT - COULD GET COST ELEMENT TEXT FROM CSKU
	LT_CE_TMP2 =
	  SELECT
		  CE.PARENT AS PARENT,
		 -- CE.CHILD AS CHILD,
		 -- CSKU.KSTAR AS COST_ELEMENT,
		  csku.kstar as child,
		  csku.kstar as CHILD_CONCAT,
		  CE.LEVEL AS LEVEL,
		  :CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS,
		  :ControllingArea AS ControllingArea
	  FROM
		  :LT_CE_TMP as CE
		  inner join "ECC_CSKU" as CSKU
		  ON (CSKU.KSTAR >= CE.VALFROM
	      and CSKU.KSTAR <= CE.VALTO)
	  WHERE trim(CSKU.KTOPL)  = :CHART_OF_ACCOUNTS;

	LT_CE =
		SELECT
			PARENT,
			CHILD,
			CHILD_CONCAT,
		--	COST_ELEMENT,
			LEVEL,
			CHART_OF_ACCOUNTS,
			ControllingArea
		from :LT_CE

		UNION

		SELECT
			  PARENT,
			  CHILD,
			  CHILD_CONCAT,
		--	  COST_ELEMENT,
			  LEVEL,
			  CHART_OF_ACCOUNTS,
			  ControllingArea
		from :LT_CE_TMP2;

	/*AC*/

/*AC - Bring in Cost Elements*/
-- combine cost centers with cost element group
	LT_CC_TMP3 =
		SELECT DISTINCT
			CC.CHILD AS PARENT,
			COEP.KSTAR AS CHILD,
			COEP.KSTAR AS CHILD_CONCAT,
		--	COST_ELEMENT,
			CC.LEVEL + 1 AS LEVEL,
			:ControllingArea AS ControllingArea,
			:Chart_Of_Accounts AS Chart_Of_Accounts,
			CE.PARENT AS CE_GR
		FROM
		  :LT_CC_TMP2 as CC
	      join "ECC_ONRKS" as ONRKS
	      on ONRKS.KOSTL = CC.CHILD
	      JOIN "ECC_COEP" AS COEP
		  ON COEP."OBJNR" = ONRKS."OBJNR"
		  AND COEP."KOKRS" = ONRKS."KOKRS"
		  INNER JOIN "ECC_CSKU" as CSKU
--ON T001."KTOPL" = CSKU."KTOPL"
		  ON COEP."KSTAR" = CSKU."KSTAR"
		  JOIN :LT_CE_TMP2 AS CE
		  ON CE.CHILD = COEP.KSTAR
	  WHERE trim(ONRKS.KOKRS) = :ControllingArea
	  AND CSKU."KTOPL" = :Chart_Of_Accounts;

	  /*ac insert - Where Plan exists but actual does not*/
	  LT_CC_TMP3_TMP =
		SELECT DISTINCT
			CC.CHILD AS PARENT,
			COEJ.KSTAR AS CHILD,
			COEJ.KSTAR AS CHILD_CONCAT,
		--	COST_ELEMENT,
			CC.LEVEL + 1 AS LEVEL,
			:ControllingArea AS ControllingArea,
			:Chart_Of_Accounts AS Chart_Of_Accounts,
			CE.PARENT AS CE_GR
		FROM
		  :LT_CC_TMP2 as CC
	      join "ECC_ONRKS" as ONRKS
	      on ONRKS.KOSTL = CC.CHILD
	      JOIN "ECC_COEJ" AS COEJ
		  ON COEJ."OBJNR" = ONRKS."OBJNR"
		  AND COEJ."KOKRS" = ONRKS."KOKRS"
		  INNER JOIN "ECC_CSKU" as CSKU
--ON T001."KTOPL" = CSKU."KTOPL"
		  ON COEJ."KSTAR" = CSKU."KSTAR"
		  JOIN :LT_CE_TMP2 AS CE
		  ON CE.CHILD = COEJ.KSTAR
	  WHERE trim(ONRKS.KOKRS) = :ControllingArea
	  AND CSKU."KTOPL" = :Chart_Of_Accounts;

	  LT_CC_TMP3 =
		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    Chart_Of_Accounts,
			    CE_GR
		    from :LT_CC_TMP3

	        UNION

		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    Chart_Of_Accounts,
			    CE_GR
		    from :LT_CC_TMP3_TMP;

		  LT_CC_TMP3 =
		    SELECT DISTINCT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    Chart_Of_Accounts,
			    CE_GR
		    from :LT_CC_TMP3;
	  /*ac insert - Where Plan exists but actual does not*/

	/*AC - Add in Cost Element Hierarchy*/

	LT_CE_TMP4 =
	  	SELECT DISTINCT
		  	CE_HIER.PARENT AS PARENT,
		  	CE_GR AS CHILD,
		  	CE_GR AS CHILD_CONCAT,
		  	CE_HIER.LEVEL + CE.LEVEL AS LEVEL,
		  	:CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS,
		  	:ControllingArea AS ControllingArea
		FROM :LT_CE_HIERARCHY as CE_HIER
	  	join  :LT_CC_TMP3 as CE
	  	ON (CE.CE_GR = CE_HIER.CHILD);

	SELECT MAX(LEVEL)
	INTO lv_max
	FROM :LT_CE_TMP4;


	while 1 = 1 do
	LT_CE_HIERARCHY_TMP =
	    SELECT DISTINCT
	    CE_HIER.PARENT AS PARENT,
	    CECHILD.PARENT AS CHILD,
	    CECHILD.PARENT AS CHILD_CONCAT,
	    CECHILD.LEVEL - 1 AS LEVEL,
	    :CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS,
	    :ControllingArea AS ControllingArea
    FROM :LT_CE_TMP4 as CECHILD
	    join :LT_CE_HIERARCHY as CE_HIER
	    ON (CECHILD.PARENT = CE_HIER.CHILD)
	    WHERE CECHILD.LEVEL = :lv_max;

	lv_max := :lv_max - 1;

	SELECT COUNT(*) INTO CE_NUM FROM :LT_CE_HIERARCHY_TMP;

	    --if (:CE_NUM = 0 and :lv_max = 0)  then
	    if (:LV_MAX IS null OR :CE_NUM = 0 and :LV_MAX <= 0)  then
	        	break;
	   -- elseif (:CE_NUM = 0 and :lv_max != 0)  then
	   elseif (:CE_NUM = 0 and :LV_MAX > 0)  then
	        CONTINUE ;
	    end if;



		    LT_CE_TMP4 =
		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    CHART_OF_ACCOUNTS,
			    ControllingArea
		    from :LT_CE_TMP4

	        UNION

		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    CHART_OF_ACCOUNTS,
			    ControllingArea
		    from :LT_CE_HIERARCHY_TMP;

		 if :lv_max = 0 then
	       	BREAK ;
	    end if;
	END WHILE;
	/*END OF AC*/

	LT_CE_TMP3 =
	SELECT DISTINCT
		  PARENT.PARENT,
		  CONCAT(PARENT.PARENT, CHILD.CHILD) AS CHILD,
		  CONCAT(PARENT.PARENT, CHILD.CHILD) AS CHILD_CONCAT,
		  --CHILD.CHILD,
	--	  COST_ELEMENT,
		  PARENT.LEVEL,
		  PARENT.ControllingArea,
		  PARENT.CHART_OF_ACCOUNTS
	from :LT_CE_TMP4 AS CHILD
	JOIN :LT_CC_TMP3 AS PARENT
	ON (PARENT.ControllingArea = CHILD.ControllingArea
	AND PARENT.CHART_OF_ACCOUNTS = CHILD.CHART_OF_ACCOUNTS)
	where CHILD.PARENT IS NULL
	AND CE_GR IS NOT null;

LT_CE_TMP5 =
			SELECT DISTINCT
			--CONCAT(PARENT.PARENT, PARENT.CHILD) AS PARENT,
		  PARENT.CHILD AS PARENT,
		  -- CHILD.CHILD AS CHILD,
		  CONCAT (SUBSTR (PARENT.CHILD, 1, 10), CHILD.CHILD) AS CHILD,
		  CONCAT (SUBSTR (PARENT.CHILD, 1, 10), CHILD.CHILD) AS CHILD_CONCAT,
	--	  COST_ELEMENT,
	--	  :CE_LEV + 1 AS LEVEL,
	--	  COST_ELEMENT,
		  PARENT.LEVEL + 1 AS LEVEL,
		  PARENT.ControllingArea AS ControllingArea,
		  PARENT.CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
	from :LT_CE_TMP4 AS CHILD
	JOIN :LT_CE_TMP3 AS PARENT
	ON (SUBSTR (PARENT.CHILD, 11, 10) = CHILD.PARENT)
	where CHILD.PARENT IS NOT NULL;

	SELECT MIN(LEVEL)
	INTO lv_min
	FROM :LT_CE_TMP5
	;

	SELECT MAX(LEVEL)
	INTO LV_MAX
	FROM :LT_CE_TMP5
	;

	WHILE :LV_MIN <= :LV_MAX DO
		LT_CE_TMP6 =
		SELECT
		PARENT.CHILD AS PARENT,
		--CONCAT (SUBSTR (PARENT.PARENT, 1, 10), PARENT.CHILD) AS PARENT,
		  --PARENT.CHILD AS PARENT,
		  --CHILD.CHILD AS CHILD,
		  CONCAT (SUBSTR (PARENT.CHILD, 1, 10), CHILD.CHILD) AS CHILD,
		  CONCAT (SUBSTR (PARENT.CHILD, 1, 10), CHILD.CHILD) AS CHILD_CONCAT,
	--	  COST_ELEMENT,
		  PARENT.LEVEL + 1 AS LEVEL,
		  PARENT.ControllingArea AS ControllingArea,
		  PARENT.CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
	from :LT_CE_TMP4 AS CHILD
	JOIN :LT_CE_TMP5 AS PARENT
	ON (SUBSTR (PARENT.CHILD, 11, 10) = CHILD.PARENT)
	where CHILD.PARENT IS NOT NULL
	AND PARENT.LEVEL = :LV_MIN;

	LV_MIN := :LV_MIN + 1;

	SELECT COUNT(*) INTO CE_NUM FROM :LT_CE_TMP6;

	    if :CE_NUM = 0 then
	       -- break;
	    else
	    	LT_CE_TMP5 =
		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    CHART_OF_ACCOUNTS
		    from :LT_CE_TMP5

	        UNION

		    SELECT PARENT,
			    CHILD,
			    CHILD_CONCAT,
		--	    COST_ELEMENT,
			    LEVEL,
			    ControllingArea,
			    CHART_OF_ACCOUNTS
		    from :LT_CE_TMP6;
		    SELECT MAX(LEVEL)
			INTO LV_MAX
			FROM :LT_CE_TMP5;
	    end if;
	END WHILE;

	LT_CE_TMP7 =
		  SELECT DISTINCT
			--CONCAT(PARENT.PARENT, PARENT.CHILD) AS PARENT,
		  PARENT.CHILD AS PARENT,
		  trim(CHILD.CHILD) AS CHILD,
		  CONCAT (SUBSTR (PARENT.CHILD, 1, 10), CHILD.CHILD) AS CHILD_CONCAT,
		  --CONCAT (SUBSTR (PARENT.CHILD, 1, 10), CHILD.CHILD) AS CHILD,
	--	  COST_ELEMENT,
		  --:CE_LEV + 1 AS LEVEL,
	--	  COST_ELEMENT,
		  PARENT.LEVEL + 1 AS LEVEL,
		  PARENT.ControllingArea AS ControllingArea,
		  PARENT.CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
	from :LT_CE_TMP2 AS CHILD
	JOIN :LT_CE_TMP5 AS PARENT
	ON (SUBSTR (PARENT.CHILD, 11, 10) = CHILD.PARENT)
	where CHILD.PARENT IS NOT NULL;
	SELECT COUNT (*) INTO LV_CE_COUNT FROM :LT_CE_TMP7;

	IF	(:LV_CE_COUNT = 0) THEN
		LT_CE_TMP7 =
			  SELECT DISTINCT
				--CONCAT(PARENT.PARENT, PARENT.CHILD) AS PARENT,
			  PARENT.CHILD AS PARENT,
			  trim(CHILD.CHILD) AS CHILD,
			   CONCAT (SUBSTR (PARENT.CHILD, 1, 10), CHILD.CHILD) AS CHILD_CONCAT,
			  --CONCAT (SUBSTR (PARENT.CHILD, 1, 10), CHILD.CHILD) AS CHILD,
		--	  COST_ELEMENT,
			  --:CE_LEV + 1 AS LEVEL,
		--	  COST_ELEMENT,
			  PARENT.LEVEL + 1 AS LEVEL,
			  PARENT.ControllingArea AS ControllingArea,
			  PARENT.CHART_OF_ACCOUNTS AS CHART_OF_ACCOUNTS
		from :LT_CE_TMP2 AS CHILD
		JOIN :LT_CE_TMP3 AS PARENT
		ON (SUBSTR (PARENT.CHILD, 11, 10) = CHILD.PARENT)
		where CHILD.PARENT IS NOT NULL;
	END IF;

	LT_CC =
		SELECT
			PARENT,
			CHILD,
			CHILD_CONCAT,
		--	COST_ELEMENT,
			LEVEL,
			ControllingArea,
			CHART_OF_ACCOUNTS
		from :LT_CC

		UNION

		SELECT
			  PARENT,
			  CHILD,
			  CHILD_CONCAT,
		--	  COST_ELEMENT,
			  LEVEL,
			  ControllingArea,
			  CHART_OF_ACCOUNTS
		from :LT_CC_TMP2

		/*AC */
		UNION

		SELECT
			  PARENT,
			  CHILD,
			  CHILD_CONCAT,
		--	  COST_ELEMENT,
			  LEVEL,
			  ControllingArea,
			  CHART_OF_ACCOUNTS
		from :LT_CE_TMP3

		UNION

		--SELECT
		--	  PARENT,
		--	  CHILD,
		--	  COST_ELEMENT,
		--	  LEVEL,
		--	  CHART_OF_ACCOUNTS,
		--	  ControllingArea
		--from :LT_CE_HIERARCHY
		--where PARENT IS NOT null;
		SELECT
			  PARENT,
			  CHILD,
			  CHILD_CONCAT,
		--(	  COST_ELEMENT,
			  LEVEL,
			  ControllingArea,
			  CHART_OF_ACCOUNTS
		  from :LT_CE_TMP5
		--from :LT_CE_TMP4
		--where PARENT IS NOT null;
		/*AC */

		UNION
		SELECT
				PARENT,
				CHILD,
				CHILD_CONCAT,
				LEVEL,
				ControllingArea,
				CHART_OF_ACCOUNTS
				from :LT_CE_TMP7;
		var_out =
		  SELECT
			  PARENT,
			  CHILD,
			  CHILD_CONCAT,
		--	  COST_ELEMENT,
			  LEVEL,
			  ControllingArea,
			  CHART_OF_ACCOUNTS
		  from :LT_HIERARCHY

	    UNION

			SELECT
			  PARENT,
			  CHILD,
			  CHILD_CONCAT,
		--	  COST_ELEMENT,
			  LEVEL,
			  ControllingArea,
			  CHART_OF_ACCOUNTS
		  from :LT_CC;

	end if;

END;

RETURN

--SELECT * FROM :VAR_OUT;
select
 	trim(ControllingArea) as CONTROLLING_AREA
,	trim(CHART_OF_ACCOUNTS) as CHART_OF_ACCOUNTS
, 	LEVEL
,	PARENT
,	trim(CHILD) as CHILD
,	trim(CHILD_CONCAT) as CHILD_CONCAT
from :var_out;


end;
