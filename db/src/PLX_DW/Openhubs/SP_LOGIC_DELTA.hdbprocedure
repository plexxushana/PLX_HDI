PROCEDURE "plx_etl::SP_LOGIC_DELTA" (in ip_bukrs nvarchar(4), out t_out "HANA_STAGING") 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	--READS SQL DATA 
	AS
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 
	DECLARE lv_start_date VARCHAR(8) := '20180301';
	DECLARE lv_end_date VARCHAR(8) := '20180301';
	DECLARE lv_cpudt_start, lv_cpudt_end, lv_aedat_start, lv_aedat_end, lv_posting_Date VARCHAR(8) := '29990101';
	DECLARE lv_cpudt_start1, lv_cpudt_end1, lv_aedat_start1, lv_aedat_end1 date := current_Date;
	DECLARE lv_delta_flag nvarchar(5000);
	
	DECLARE lv_row_count, lv_step, lv_count_diff, lv_found INTEGER;
	DECLARE i, lv_mod, lv_rest,  lv_div , lv_first_time, lv_counter   INTEGER;
	declare lv_belnr,lv_belnr1       nvarchar(10):='9999999999';
	declare lv_belnr10,lv_belnr11    nvarchar(10):='9999999999';
	declare lv_packageid			nvarchar(50); 
	
	DECLARE lv_bukrs nvarchar(4) := '9999'; 
	DECLARE lv_gjahr nvarchar(4) := '9999'; 
	DECLARE lv_buzei nvarchar(3) :='123';
 	DECLARE arr_dates  VARCHAR(8) ARRAY;
 	 
	DECLARE ARR_BSIK_SEARCH  NVARCHAR(100) ARRAY;
	DECLARE ARR_BSIK_BUZEI  NVARCHAR(3) ARRAY;
	DECLARE ARR_BSIK_BUKRS  NVARCHAR(4) ARRAY;
	DECLARE ARR_BSIK_GJAHR  VARCHAR(4) ARRAY;
    DECLARE lv_string_rec1, lv_string_rec2  VARCHAR(1073741823) ;
	     

	select current_date into lv_cpudt_start1 from "SYS::DUMMY";
	select to_nvarchar(ADD_DAYS(lv_cpudt_start1, -1), 'yyyymmdd') 	into lv_cpudt_start 	from "SYS::DUMMY";
	 
--1. Generate Request ID (date and time)
--2. Get data from ECC_BSIK and copy into array and then start investigating each row . This is mostly for DEMO purposes.
--3. There are 2 scenarios. 
              --- a. When entry from ECC_BSIK is new to HANA_STAGING and HANA_DW. in this case the code simply inserts a record in both tables. 
              ----b. When entry already exist in HANA_STAGING. Again 2 scenarios. 
            					--b1. Entry is different from existing HANA_STAGING entry, for ex Amt is changed. In this case the code performs the following
		            					-- b1.1. inserts into HANA_sTAGING the reversal entry 
		            					-- b1.2. inserts into HANA_STAGING the new entry with the new Amt for ex.
		            					-- b1.3. upserts into HANA_DW the existing entry with the new Amt for ex. 
		            			--b2. Entry is not different . In this case it does nothing. 		
--4. Determine Delta Flag as concat of Posting Date with REquest_id 
--5. Outputs the latest records with request_id from HANA_STAGING


--1. Generate Request ID
  lv_packageid = concat ( to_nvarchar(lv_cpudt_start1 ,'yyyymmdd'), to_nvarchar(current_time, 'hhmmss') )  ; 
 
 --. Get data from ECC_BSIK and copy into THE ARRAY. tHIS IS FOR  DEMO purposes. later we can have the FG do this. 
-- get list of docs in BSIK within this 
	lt_bsik_doc_list = 
	SELECT  BUKRS, LIFNR, GJAHR, BELNR, BUZEI, MONAT, BSCHL , BLDAT,  DMBTR, WRBTR, BUDAT, SHKZG, CPUDT,AUGDT,ZFBDT,   GJAHR || BUKRS || BELNR || BUZEI AS "SEARCH_FIELD"
	FROM    "ECC_BSIK" 
	WHERE   ---("CPUDT" >= lv_cpudt_start  )  	and 
	"BUKRS" = :ip_bukrs   and 	gjahr = '2023' AND BUDAT = '20221031'; 

	 
	 -- now we consider 2 scenarios - a) line item is new and therefore gets inserted right away in hana_staging nd hana_dw
	 -- scenario b) line item is existing and therefore it is in hana_staging and we need to compare and act accordingly a) if it is same do nothing
	 -- if is different, then do - overwrite it hana_dw and create a reversal entry in hana_staging and enter also a new line in hana staging with the latest values. 
	 -- for ex: if there is a doc1 item 1 amt 5 and we get a doc 1 item 1 amt 10, then in hana_dw overwrite the existing entry and enter amt 10, and in 
	 -- hana_staging create a reversal entry with -5 and an entry with amt 10. 
   --scenario a. 
   
--3. process scenarios a) , b) . 
	ARR_BSIK_SEARCH  := ARRAY_AGG(:lt_bsik_doc_list.SEARCH_FIELD ORDER BY BUKRS, BELNR, GJAHR);
	lv_rest := CARDINALITY(:arr_bsik_search);
    FOR lv_row_count IN 1..lv_rest  do
    -- find the latest record in HANA_DW and the latest record from HANA_STAGING 
    lv_gjahr := substr(:ARR_BSIK_SEARCH[:lv_row_count], 1,4);
    lv_bukrs := substr(:ARR_BSIK_SEARCH[:lv_row_count], 5,4);
    lv_belnr := substr(:ARR_BSIK_SEARCH[:lv_row_count], 9,10);
    lv_buzei := substr(:ARR_BSIK_SEARCH[:lv_row_count], 19,3);
    

    lt_scenario = select * from "HANA_STAGING"  WHERE COMP_CODE = :lv_bukrs and AC_DOC_NO = :lv_belnr and ITEM_NUM = :lv_buzei and LEFT(FISCPER,4)  = :lv_gjahr ;
    
    lt_current_line = select * from "ECC_BSIK"  WHERE BUKRS = :lv_bukrs and BELNR = :lv_belnr and BUZEI = :lv_buzei and GJAHR  = :lv_gjahr ;
    
   
    
    select count(*) INTO lv_found FROM :lt_scenario;

         IF :lv_found = 0  then 
         --SCENARIO A
       --GENERATE THE DELTA_FLAG value first
	       LV_POSTING_DATE := ifnull(:lt_current_line.BUDAT[1],'');
	       lv_delta_flag := 'R' || TO_NVARCHAR(:LV_PACKAGEID,'yyyymmdd') || '_' ||to_nvarchar(:LV_POSTING_DATE); 
	  
	    -- it means entry is totally new. so enter it in HANA_STAGING AND HANA_DB
	         insert into "HANA_STAGING" (SELECT :lv_packageid AS "REQUEST_ID", 'Rec0' as "REC_NR", "BUKRS" AS "COMP_CODE", LIFNR AS "CREDITOR",
	          GJAHR||'0'||MONAT AS "FISCPER", 'V3' AS "FISCVARNT",  BELNR AS "AC_DOC_NO" , BUZEI AS "ITEM_NUM" , 
	           'O' AS FI_DSBITEM, '' AS FI_DOCSTAT, '' AS C_CTR_AREA, '' AS DUNN_AREA, '' AS ACCT_TYPE, '' AS SP_GL_IND, '' AS AC_DOC_TYP,
	           BSCHL AS POST_KEY, BLDAT AS DOC_DATE, BUDAT AS PSTNG_DATE, CPUDT AS CREATEDON, AUGDT AS CLEAR_DATE, '' AS LAST_DUNN, ZFBDT AS NETDUEDATE,
	           '' AS DSCT_DATE1, '' AS DSCT_DATE2, DMBTR AS DMBTR 
	           FROM :lt_current_line); 
	           
	          insert into "HANA_DW" (SELECT "BUKRS" AS "COMP_CODE", LIFNR AS "CREDITOR",
	          GJAHR||'0'||MONAT AS "FISCPER", 'V3' AS "FISCVARNT",  BELNR AS "AC_DOC_NO" , BUZEI AS "ITEM_NUM" , 
	           'O' AS FI_DSBITEM, '' AS FI_DOCSTAT, '' AS C_CTR_AREA, '' AS DUNN_AREA, '' AS ACCT_TYPE, '' AS SP_GL_IND, '' AS AC_DOC_TYP,
	           BSCHL AS POST_KEY, BLDAT AS DOC_DATE, BUDAT AS PSTNG_DATE, CPUDT AS CREATEDON, AUGDT AS CLEAR_DATE, '' AS LAST_DUNN, ZFBDT AS NETDUEDATE,
	           '' AS DSCT_DATE1, '' AS DSCT_DATE2, :lv_delta_flag as delta_flag, DMBTR AS DMBTR 
	           FROM :lt_current_line);   
           
         
           END IF ; 

IF :lv_found > 0  then 
-- it means entry exist so let's perform the overwrite tasks
--SCENARIO B

    lt_rec1 = select TOP 1 * from :LT_CURRENT_LINE WHERE bukrs  = :lv_bukrs and belnr  = :lv_belnr and buzei = :lv_buzei and gjahr = :lv_gjahr  ; 

    lv_string_rec1 = IFNULL(:lt_rec1.BUKRS[1], '') || IFNULL(:lt_rec1.LIFNR[1], '')  || IFNULL(:lt_rec1.BELNR[1], '')  
              || IFNULL(:lt_rec1.BUZEI[1], '')  || IFNULL(:lt_rec1.BSCHL[1], '')  || IFNULL(:lt_rec1.BLDAT[1], '')   || IFNULL(:lt_rec1.BUDAT[1], '')  
              || IFNULL(:lt_rec1.CPUDT[1], '')  || IFNULL(:lt_rec1.AUGDT[1], '')  || IFNULL(:lt_rec1.ZFBDT[1], '')  
              || IFNULL(:lt_rec1.DMBTR[1], 0)  ; 

    lt_rec2 = select TOP 1 * from "HANA_STAGING" WHERE COMP_CODE = :lv_bukrs and AC_DOC_NO = :lv_belnr and ITEM_NUM = :lv_buzei and LEFT(FISCPER,4)  = :lv_gjahr  ORDER BY REQUEST_ID DESC; 
     lv_string_rec2 = IFNULL(:lt_rec2.COMP_CODE[1], '') || IFNULL(:lt_rec2.CREDITOR[1], '') 
              || IFNULL(:lt_rec2.AC_DOC_NO[1], '')   || IFNULL(:lt_rec2.ITEM_NUM[1], '')  || IFNULL(:lt_rec2.POST_KEY[1], '')  || IFNULL(:lt_rec2.DOC_DATE[1], '')   
              || IFNULL(:lt_rec2.PSTNG_DATE[1], '')  || IFNULL(:lt_rec2.CREATEDON[1], '')  || IFNULL(:lt_rec2.CLEAR_DATE[1], '')  
              || IFNULL(:lt_rec2.NETDUEDATE[1], '')  || IFNULL(:lt_rec2.DMBTR[1], 0)  ; 
    

    -- time to compare the record from Staging table with the record from DW table. If they are different then a) if it is same do nothing
	-- if is different, then do this: - overwrite it hana_dw and create a reversal entry in hana_staging and enter also a new line in hana staging with the latest values. 
           LV_POSTING_DATE := ifnull(:lt_rec2.PSTNG_DATE[1],'');
	       lv_delta_flag := 'R' || TO_NVARCHAR(:LV_PACKAGEID,'yyyymmdd') || '_' ||to_nvarchar(:LV_POSTING_DATE); 
	       
    if lv_String_rec1 <> lv_String_rec2  then 
    --enter in hana_staging the reversal entry  . bcz there ar 2 inserts with same REQUEST_ID and other key fileds, the REC1, REC2 is created to create unique constrain. 
    INSERT INTO "HANA_STAGING" ( SELECT :lv_packageid as REQUEST_ID, 'Rec1' as "REC_NR", COMP_CODE, CREDITOR, FISCPER,     FISCVARNT,    
               AC_DOC_NO,    ITEM_NUM,    FI_DSBITEM,    FI_DOCSTAT,  
               C_CTR_AREA,    DUNN_AREA,    ACCT_TYPE,    SP_GL_IND,   
               AC_DOC_TYP,    POST_KEY,    DOC_DATE,     PSTNG_DATE,   
               CREATEDON,    CLEAR_DATE,    LAST_DUNN, NETDUEDATE,   
               DSCT_DATE1,    DSCT_DATE2,    (-1) *  DMBTR  FROM :LT_REC2); 
    --insert  in hana_staging the new line that will be the last true entry  as in HANA_DW
    INSERT INTO "HANA_STAGING" ( SELECT :lv_packageid  as REQUEST_ID, 'Rec2' as "REC_NR", BUKRS AS COMP_CODE, LIFNR AS CREDITOR, GJAHR||'0'||MONAT AS FISCPER ,    'V3' AS FISCVARNT,    
               BELNR AS AC_DOC_NO,    BUZEI AS ITEM_NUM,   'O'  AS    FI_DSBITEM,   '' AS  FI_DOCSTAT,  
               '' AS C_CTR_AREA,    '' AS DUNN_AREA,   '' AS  ACCT_TYPE,    '' AS SP_GL_IND,   
               '' AS AC_DOC_TYP,  BSCHL AS    POST_KEY,    BLDAT AS DOC_DATE,  BUDAT AS    PSTNG_DATE,   
               CPUDT AS CREATEDON,    AUGDT AS CLEAR_DATE,  '' AS  LAST_DUNN,  ZFBDT AS  NETDUEDATE,   
               '' AS DSCT_DATE1,    '' AS DSCT_DATE2, DMBTR  FROM :LT_REC1); 
    
   -- overwrite in HANA_DW the corresponding entry
    UPSERT  "HANA_DW" 
    SELECT BUKRS AS COMP_CODE, LIFNR AS CREDITOR, GJAHR||'0'||MONAT AS FISCPER ,    'V3' AS FISCVARNT,    
               BELNR AS AC_DOC_NO,    BUZEI AS ITEM_NUM,   'O'    AS    FI_DSBITEM,   '' AS  FI_DOCSTAT,  
               '' AS C_CTR_AREA,    '' AS DUNN_AREA,   '' AS  ACCT_TYPE,    '' AS SP_GL_IND,   
               '' AS AC_DOC_TYP,  BSCHL AS    POST_KEY,    BLDAT AS DOC_DATE,  BUDAT AS    PSTNG_DATE,   
               CPUDT AS CREATEDON,    AUGDT AS CLEAR_DATE,  '' AS  LAST_DUNN,  ZFBDT AS  NETDUEDATE,   
               '' AS DSCT_DATE1,    '' AS DSCT_DATE2,
                :lv_delta_flag as delta_flag , DMBTR  FROM :LT_REC1; 
 
 
    LV_COUNT_DIFF := :LV_COUNT_DIFF + 1 ;
    
    end if;
    
  end if ;   
    
    
    end for;


t_out = select * from "HANA_STAGING" WHERE REQUEST_ID = :lv_packageid;
--t_out = :LV_COUNT_DIFF; 


END;
