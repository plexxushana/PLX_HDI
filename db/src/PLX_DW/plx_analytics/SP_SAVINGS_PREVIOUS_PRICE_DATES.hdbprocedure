

procedure "plx_analytics::SP_SAVINGS_PREVIOUS_PRICE_DATES" ( OUT t_out "Z_PREV_PRICE_DATES" ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	reads sql data AS
BEGIN

/***************************** 
  need:
  1:
    determine actual previous price per invoice, based on previous price effectivity. 
  2:
    print error message for materials which have price overlap.
    
  todo:
    assume many invoices per day; select all days between previous price ranges.
    sap_date, prev_price_start, prev_price_end
    
    for each VPN, Vendor, Site, determine if prices overlap.
    add VPN, Vendor, Site to set joining on prev_price_start, prev_price_end.
    count prev_price for sap_date group by vendor, VPN, site.
        expect 1 prev_price, if > 1 then print error and set price to 0.00
    	
 *****************************/
    DECLARE i INTEGER;
    declare lv_row_count integer;

-- initialize the return table. 
-- this is necessary to append later.
    lt_dates =
        select '' as price_effective_start_date,
               '' as price_effective_end_date,
               '' as sap_date --dummy
        from "DUMMY";

--get start, end range from manual upload Current Price Dates
    lt_cpd =   
	   select distinct
	       price_effective_start_date ,
	       price_effective_end_date
	   from "MANUAL_SAVINGS_PREVIOUS_PRICE";
  
--get row count of price date ranges
    select count(*) 
    into   lv_row_count
    from   :lt_cpd;
   
   --loop over lt_cpd and use start, end dates to select actual date range
   for i in 0..:lv_row_count -1 do
   
        --pop this range
        ls_cpd = 
        select "PRICE_EFFECTIVE_START_DATE" ,
                "PRICE_EFFECTIVE_END_DATE" 
        from :lt_cpd
        limit 1 offset :i;        
       
        --fetch individual day dates for range 
        lt_sap_dates =
			 select 
			 :ls_cpd.price_effective_start_date,
			 :ls_cpd.price_effective_end_date,
			 fc."SAP_DATE"		        
			 from "Z_FISCAL_CALENDAR" as fc,
			       :ls_cpd
			 where date_sql >= :ls_cpd.price_effective_start_date
			 and   date_sql <  :ls_cpd.price_effective_end_date
			 order by fc."SAP_DATE";
			 
        --append to results 
	        lt_dates = 
	            SELECT *
	            FROM :lt_sap_dates
	
	            UNION ALL
	
	            SELECT *
	            FROM :lt_dates;
 
    end for;


/*
    for each VPN, Vendor, Site, determine if prices overlap.
    add VPN, Vendor, Site to set joining on prev_price_start, prev_price_end.
    count prev_price for sap_date group by vendor, VPN, site.
        expect 1 prev_price, if > 1 then print error and set price to 0.00
*/


lt_prev_prices =
    select   
             :lt_dates."SAP_DATE"
           , mspp.price_effective_start_date
           , mspp.price_effective_end_date
           , ltrim(mspp.vendor_id, '0') as vendor_id
           , mspp.vendor_part_number
           , mspp.org_id
           , mspp.previous_price_ea
           , mspp.new_contract_id
           , mspp.current_annual_usage
           , mspp.bukrs
           , mspp.message
    from     "MANUAL_SAVINGS_PREVIOUS_PRICE" mspp 
    join     :lt_dates
    on       :lt_dates.price_effective_start_date = mspp.price_effective_start_date
    and      :lt_dates.price_effective_end_date   = mspp.price_effective_end_date
    ;
    
t_out = 
select *
from   :lt_prev_prices;

 
END;
